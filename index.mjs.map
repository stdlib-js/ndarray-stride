{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/assert-is-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the stride along a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {integer} stride\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = stride( zeros( [ 3, 3, 3 ] ), 0 );\n* // returns 9\n*/\nfunction stride( x, dim ) {\n\tvar st;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null || !isCollection( x.shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tst = getStride( x, dim );\n\tif ( isInteger( st ) ) {\n\t\treturn st;\n\t}\n\t// As ndarrays must have integer-valued strides, if the returned \"stride\" value is not integer-valued, assume we haven't been provided an ndarray:\n\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nexport default stride;\n"],"names":["stride","x","dim","st","isCollection","shape","TypeError","format","isInteger","getStride"],"mappings":";;0WA8CA,SAASA,EAAQC,EAAGC,GACnB,IAAIC,EAGJ,GAAkB,iBAANF,GAAwB,OAANA,IAAeG,EAAcH,EAAEI,OAC5D,MAAM,IAAIC,UAAWC,EAAQ,oEAAqEN,IAEnG,IAAMO,EAAWN,GAChB,MAAM,IAAII,UAAWC,EAAQ,qEAAsEL,IAGpG,GADAC,EAAKM,EAAWR,EAAGC,GACdM,EAAWL,GACf,OAAOA,EAGR,MAAM,IAAIG,UAAWC,EAAQ,oEAAqEN,GACnG"}